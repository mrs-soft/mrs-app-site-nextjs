(()=>{"use strict";class t{constructor(t){this.widgetBox=void 0,this.redirectUrl="",this.productId=null,this.cardList=null,this.input=null,this.plus=null,this.minus=null,this.period=null,this.countName=null,this.monthPeriod=null,this.yearPeriod=null,this.widgetCreate=()=>{var t,i,e,s,n,o;const r=this.widgetBox,a=this.plans||[];let c=0,d=1,u=a[0].minLicenseCount||1,l=!1;a.forEach((t=>{t.maxLicenseCount>d&&(d=t.maxLicenseCount),t.minLicenseCount<u&&(u=t.minLicenseCount),t.discount>c&&(c=t.discount),t.maxLicenseCount===t.minLicenseCount||l||(l=!0)}));const h=`\n      <div class="saas-shop-container">\n        <div class="saas-shop-common-form">\n         ${l?`<div class="saas-shop-count-container">\n            <div class="saas-shop-form-minus"></div>\n            <div class="body2">\n              <input class="saas-shop-form-input" type="number" name="count" min="${u}"  max="${d}" value="${u}"\n                      onkeydown="this.style.width = ((this.value.length+1 ) * 9) + 'px';" onkeyup="if(this.value<0) value=1;">\n              <span class="saas-shop-count-name">пользователь</span>\n            </div>\n            <div class="saas-shop-form-plus"></div>\n          </div>`:""}\n          <label class="saas-shop-period-container">\n            <input type="checkbox" class="saas-shop-period-input">\n            <button class="saas-shop-period-month">\n             Месячная\n            </button>\n            <button class="saas-shop-period-year">\n             Годовая\n            </button>  \n            ${c?`<div class="saas-shop-period-sale" > - ${c}% </div>`:""}\n          </label>\n        </div>\n        <div class="saas-shop-card-container"> \n          ${(()=>{let t="";return a.forEach((i=>{var e,s;const n=i.id===(null===(e=this.config)||void 0===e?void 0:e.hightlight)?"contained":"outlined",o=i.id===(null===(s=this.config)||void 0===s?void 0:s.subscriptionId)?"disabled":"";t+=`\n          <div class="saas-shop-card" data-tariffid="${i.id}" >\n            <div class="saas-shop-card-name subtitle2">${i.name}</div>\n            <h5 class="saas-shop-price-value">\n              ${i.price.toLocaleString()} ₽\n               <span> ₽ </span>\n            </h5>\n            <div class="saas-shop-price-text body2">за пользователя в </div>\n            <div class="saas-shop-description body2">${i.description}</div>\n              <button class="saas-shop-card-button-container ${n} large" disabled=${o}></button>\n          </div>    \n          `})),t})()}\n        </div>\n      </div>`;r.innerHTML+=h,this.cardList=document.querySelectorAll(".saas-shop-card"),this.input=document.querySelector(".saas-shop-form-input"),this.plus=document.querySelector(".saas-shop-form-plus"),this.minus=document.querySelector(".saas-shop-form-minus"),this.period=document.querySelector(".saas-shop-period-input"),this.countName=document.querySelector(".saas-shop-count-name"),this.monthPeriod=document.querySelector(".saas-shop-period-month"),this.yearPeriod=document.querySelector(".saas-shop-period-year"),this.checkTariff(a),null===(t=this.input)||void 0===t||t.addEventListener("change",(()=>{this.checkTariff(a)})),null===(i=this.plus)||void 0===i||i.addEventListener("click",(()=>{this.calcPlus(this.plus,d),this.checkTariff(a)})),null===(e=this.minus)||void 0===e||e.addEventListener("click",(()=>{this.calcMinus(this.minus,u),this.checkTariff(a)})),null===(s=this.monthPeriod)||void 0===s||s.addEventListener("click",(t=>{this.setPeriod(t.target,!1)})),null===(n=this.yearPeriod)||void 0===n||n.addEventListener("click",(t=>{this.setPeriod(t.target,!0)})),null===(o=this.period)||void 0===o||o.parentNode.addEventListener("click",(()=>{this.checkTariff(a)}))},this.checkLicensesCount=(t,i,e)=>{const s=t.querySelector(".saas-shop-card-button-container");return i>e.maxLicenseCount&&e.minLicenseCount!==e.maxLicenseCount?(s.setAttribute("disabled","disabled"),`До ${e.maxLicenseCount} ${this.conditionUserText(e.maxLicenseCount)}`):i<e.minLicenseCount&&e.maxLicenseCount!==e.minLicenseCount?(s.setAttribute("disabled","disabled"),`От ${e.minLicenseCount} ${this.conditionUserText(e.minLicenseCount)}`):void s.removeAttribute("disabled")},this.setButton=(t,i,e)=>{var s,n,o,r;const a=t.querySelector(".saas-shop-card-button-container");let c="";const d=(null===(s=this.config)||void 0===s?void 0:s.subscriptionId)!==i.id,u=i.maxLicenseCount!==i.minLicenseCount,l=i.discount?(null==i?void 0:i.price)*Number(null===(n=this.input)||void 0===n?void 0:n.value)*12*((100-i.discount)/100):(null==i?void 0:i.price)*Number(null===(o=this.input)||void 0===o?void 0:o.value)*12,h=(this.period.checked?l:(null==i?void 0:i.price)*Number(null===(r=this.input)||void 0===r?void 0:r.value)).toLocaleString();c=(null==i?void 0:i.price)&&d&&!e&&this.input&&u?`Купить за ${h} ₽`:!u&&d?`Выбрать ${i.name}`:e||"Текущий тариф";const p=this.createHref(i);d||a.setAttribute("disabled","disabled"),a.innerHTML=`\n      <p class="saas-shop-card-button-href">\n          ${c}\n      </p>\n      `,a.onclick=()=>{window.open(p,"_blank")}},this.checkTariff=t=>{var i,e,s,n;null===(i=this.input)||void 0===i||(i.value=Number(this.input.value)>99999?99999:Number(null===(e=this.input)||void 0===e?void 0:e.value)),this.input&&(this.input.style.width=9*this.input.value.length+"px"),this.countName&&(this.countName.textContent=this.userText(Number(null===(s=this.input)||void 0===s?void 0:s.value)));for(const i of this.cardList){const e=t.find((t=>t.id.toString()===i.dataset.tariffid)),s=this.checkLicensesCount(i,Number(null===(n=this.input)||void 0===n?void 0:n.value),e);this.setButton(i,e,s);const o=i.querySelector(".saas-shop-price-text"),r=i.querySelector(".saas-shop-price-value"),a=this.period.checked?"за пользователя в год":"за пользователя в месяц",c=this.period.checked&&e.discount?(12*e.price*((100-e.discount)/100)).toLocaleString():(12*e.price).toLocaleString();o.textContent=e.maxLicenseCount===e.minLicenseCount?`до ${e.maxLicenseCount} пользователей`:a,r.textContent=this.period.checked?`${c} ₽`:`${e.price.toLocaleString()} ₽`}},this.createHref=t=>{var i,e;const s=this.period.checked?"&annually=true":"",n=(null===(i=this.input)||void 0===i?void 0:i.value)&&t.maxLicenseCount!==t.minLicenseCount?null===(e=this.input)||void 0===e?void 0:e.value:t.maxLicenseCount;return this.redirectUrl+`/checkout?productId=${this.productId}&tariffId=${t.id}${s}&licensesCount=${n}`},this.calcPlus=(t,i)=>{const e=null==t?void 0:t.parentNode.querySelector(".saas-shop-form-input"),s=parseInt(e.value)+1;i>=s&&(e.value=s)},this.calcMinus=(t,i)=>{let e=null==t?void 0:t.parentNode.querySelector(".saas-shop-form-input"),s=parseInt(e.value)-1;s>=i&&(e.value=s)},this.setPeriod=(t,i)=>{(null==t?void 0:t.parentNode.querySelector(".saas-shop-period-input")).checked=i},this.userText=t=>{const i=+t.toString().slice(-1),e=+t.toString().slice(-2,-1);return 1===i&&1!==e?"пользователь":i>1&&i<5&&1!==e?"пользователя":"пользователей"},this.conditionUserText=t=>"1"===t.toString().slice(-1)?"пользователя":"пользователей",this.widgetBox=t.widgetBox,this.redirectUrl=t.redirectUrl,this.productId=t.productId,this.plans=t.plans,this.config=t.config}}var i;const e=(null===(i=window.WidgetConfig)||void 0===i?void 0:i.productId)?window.WidgetConfig.productId:"0eb84014-f370-4490-80ae-789473460cee";var s=new class{constructor(t){this.idContainer="",this.api="",this.redirectUrl="",this.productId=null,this.idContainer=t.idContainer,this.api=t.api,this.redirectUrl=t.redirectUrl,this.productId=t.productId}init(i){fetch(this.api+"/products/"+this.productId+"/plans").then((function(t){return 200!==t.status?Promise.reject(new Error(t.statusText)):Promise.resolve(t)})).then((function(t){return t.json()})).then((e=>{document.querySelector(this.idContainer)?new t({widgetBox:document.querySelector(this.idContainer),redirectUrl:this.redirectUrl,productId:this.productId,plans:e,config:i}).widgetCreate():alert("Container with id "+this.idContainer+" not found!")})).catch((t=>{console.log(t)}))}}({idContainer:".saas_shop_tariffs",api:"https://lk.mrsapp.ru/api",redirectUrl:"https://lk.mrsapp.ru",productId:e});window.WidgetConfig?s.init(window.WidgetConfig):s.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0EsRUFBU08sTUFDbEIsSUFDQ1IsTUFBTVMsSUFDRHZFLFNBQVNFLGNBQWMxQixLQUFLa0YsYUFDWixJQUFJbEcsRUFBVSxDQUM5QkcsVUFBV3FDLFNBQVNFLGNBQWMxQixLQUFLa0YsYUFDdkM3RixZQUFhVyxLQUFLWCxZQUNsQkMsVUFBV1UsS0FBS1YsVUFDaEJZLE1BQU82RixFQUNQakYsV0FFUWYsZUFFVmlHLE1BQU0scUJBQXVCaEcsS0FBS2tGLFlBQWMsY0FDbEQsSUFFRGUsT0FBT0MsSUFDTkMsUUFBUUMsSUFBSUYsRUFBTSxHQUV4QixHRC9CMEMsQ0FDMUNoQixZQVRrQixxQkFVbEJDLElBWlUsMkJBYVY5RixZQVprQix1QkFhbEJDLFVBQVd5RixJQUdUeEIsT0FBT3lCLGFBQ1RDLEVBQVVHLEtBQUs3QixPQUFPeUIsY0FDakJDLEVBQVVHLE0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYWFzLXNob3Atc2l0ZS8uL3NyYy9wcmVzZW50ZXIvd2lkZ2V0Qm94L1dpZGdldEJveC50cyIsIndlYnBhY2s6Ly9zYWFzLXNob3Atc2l0ZS8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9zYWFzLXNob3Atc2l0ZS8uL3NyYy9wcmVzZW50ZXIvV2lkZ2V0U2Fhc1Nob3BQcmVzZW50ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUNvbmZpZyB9IGZyb20gJy4uL0lXaWRnZXRTYWFzU2hvcCdcbmltcG9ydCB7IElQbGFuLCBJV2lkZ2V0Qm94LCBJV2lkZ2V0Qm94UGFyYW1zIH0gZnJvbSAnLi9JV2lkZ2V0Qm94J1xuXG5leHBvcnQgY2xhc3MgV2lkZ2V0Qm94IGltcGxlbWVudHMgSVdpZGdldEJveCB7XG4gIHdpZGdldEJveDogSFRNTERpdkVsZW1lbnQgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcbiAgcmVkaXJlY3RVcmw6IHN0cmluZyA9ICcnXG4gIHByb2R1Y3RJZDogc3RyaW5nIHwgbnVsbCA9IG51bGxcbiAgcGxhbnM6IElQbGFuW11cbiAgY29uZmlnOiBJQ29uZmlnXG5cbiAgcHJpdmF0ZSBjYXJkTGlzdDogTm9kZUxpc3RPZjxIVE1MRGl2RWxlbWVudD4gfCBudWxsID0gbnVsbFxuICBwcml2YXRlIGlucHV0OiBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbCA9IG51bGxcbiAgcHJpdmF0ZSBwbHVzOiBIVE1MRGl2RWxlbWVudCB8IG51bGwgPSBudWxsXG4gIHByaXZhdGUgbWludXM6IEhUTUxEaXZFbGVtZW50IHwgbnVsbCA9IG51bGxcbiAgcHJpdmF0ZSBwZXJpb2Q6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsID0gbnVsbFxuICBwcml2YXRlIGNvdW50TmFtZTogSFRNTFNwYW5FbGVtZW50IHwgbnVsbCA9IG51bGxcbiAgcHJpdmF0ZSBtb250aFBlcmlvZDogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsID0gbnVsbFxuICBwcml2YXRlIHllYXJQZXJpb2Q6IEhUTUxCdXR0b25FbGVtZW50IHwgbnVsbCA9IG51bGxcblxuICBjb25zdHJ1Y3RvcihwYXJhbXM6IElXaWRnZXRCb3hQYXJhbXMpIHtcbiAgICB0aGlzLndpZGdldEJveCA9IHBhcmFtcy53aWRnZXRCb3hcbiAgICB0aGlzLnJlZGlyZWN0VXJsID0gcGFyYW1zLnJlZGlyZWN0VXJsXG4gICAgdGhpcy5wcm9kdWN0SWQgPSBwYXJhbXMucHJvZHVjdElkXG4gICAgdGhpcy5wbGFucyA9IHBhcmFtcy5wbGFuc1xuICAgIHRoaXMuY29uZmlnID0gcGFyYW1zLmNvbmZpZ1xuICB9XG5cbiAgd2lkZ2V0Q3JlYXRlID0gKCk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IHdpZGdldEJveCA9IHRoaXMud2lkZ2V0Qm94XG4gICAgY29uc3QgdGFyaWZmTGlzdDogSVBsYW5bXSA9IHRoaXMucGxhbnMgfHwgW11cbiAgICBsZXQgZGlzY291bnQ6IG51bWJlciA9IDBcbiAgICBsZXQgbWF4aW11bVVzZXJzOiBudW1iZXIgPSAxXG4gICAgbGV0IG1pbkxpY2Vuc2VDb3VudDogbnVtYmVyID0gdGFyaWZmTGlzdFswXS5taW5MaWNlbnNlQ291bnQgfHwgMVxuICAgIGxldCBpc0NvdW50Q29udGFpbmVyID0gZmFsc2VcblxuICAgIHRhcmlmZkxpc3QuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGlmIChlbC5tYXhMaWNlbnNlQ291bnQgPiBtYXhpbXVtVXNlcnMpIHtcbiAgICAgICAgbWF4aW11bVVzZXJzID0gZWwubWF4TGljZW5zZUNvdW50XG4gICAgICB9XG4gICAgICBpZiAoZWwubWluTGljZW5zZUNvdW50IDwgbWluTGljZW5zZUNvdW50KSB7XG4gICAgICAgIG1pbkxpY2Vuc2VDb3VudCA9IGVsLm1pbkxpY2Vuc2VDb3VudFxuICAgICAgfVxuXG4gICAgICBpZiAoZWwuZGlzY291bnQgPiBkaXNjb3VudCkge1xuICAgICAgICBkaXNjb3VudCA9IGVsLmRpc2NvdW50XG4gICAgICB9XG5cbiAgICAgIGlmIChlbC5tYXhMaWNlbnNlQ291bnQgIT09IGVsLm1pbkxpY2Vuc2VDb3VudCAmJiAhaXNDb3VudENvbnRhaW5lcikge1xuICAgICAgICBpc0NvdW50Q29udGFpbmVyID0gdHJ1ZVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBvdXRwdXRDYXJkTGlzdCA9ICgpID0+IHtcbiAgICAgIGxldCB0ZW1wb3JhcnlDYXJkID0gYGBcbiAgICAgIHRhcmlmZkxpc3QuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgY29uc3Qgc3R5bGVGb3JCdG4gPSBlbC5pZCA9PT0gdGhpcy5jb25maWc/LmhpZ2h0bGlnaHQgPyAnY29udGFpbmVkJyA6ICdvdXRsaW5lZCdcbiAgICAgICAgY29uc3QgaXNEaXNhYmxlZCA9IGVsLmlkID09PSB0aGlzLmNvbmZpZz8uc3Vic2NyaXB0aW9uSWQgPyAnZGlzYWJsZWQnIDogJydcblxuICAgICAgICB0ZW1wb3JhcnlDYXJkICs9IGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic2Fhcy1zaG9wLWNhcmRcIiBkYXRhLXRhcmlmZmlkPVwiJHtlbC5pZH1cIiA+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2Fhcy1zaG9wLWNhcmQtbmFtZSBzdWJ0aXRsZTJcIj4ke2VsLm5hbWV9PC9kaXY+XG4gICAgICAgICAgICA8aDUgY2xhc3M9XCJzYWFzLXNob3AtcHJpY2UtdmFsdWVcIj5cbiAgICAgICAgICAgICAgJHtlbC5wcmljZS50b0xvY2FsZVN0cmluZygpfSDigr1cbiAgICAgICAgICAgICAgIDxzcGFuPiDigr0gPC9zcGFuPlxuICAgICAgICAgICAgPC9oNT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzYWFzLXNob3AtcHJpY2UtdGV4dCBib2R5MlwiPtC30LAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINCyIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNhYXMtc2hvcC1kZXNjcmlwdGlvbiBib2R5MlwiPiR7ZWwuZGVzY3JpcHRpb259PC9kaXY+XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzYWFzLXNob3AtY2FyZC1idXR0b24tY29udGFpbmVyICR7c3R5bGVGb3JCdG59IGxhcmdlXCIgZGlzYWJsZWQ9JHtpc0Rpc2FibGVkfT48L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj4gICAgXG4gICAgICAgICAgYFxuICAgICAgfSlcbiAgICAgIHJldHVybiB0ZW1wb3JhcnlDYXJkXG4gICAgfVxuXG4gICAgY29uc3QgY291bnRMaWNlbnNlcyA9IGlzQ291bnRDb250YWluZXJcbiAgICAgID8gYDxkaXYgY2xhc3M9XCJzYWFzLXNob3AtY291bnQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2Fhcy1zaG9wLWZvcm0tbWludXNcIj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJib2R5MlwiPlxuICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJzYWFzLXNob3AtZm9ybS1pbnB1dFwiIHR5cGU9XCJudW1iZXJcIiBuYW1lPVwiY291bnRcIiBtaW49XCIke21pbkxpY2Vuc2VDb3VudH1cIiAgbWF4PVwiJHttYXhpbXVtVXNlcnN9XCIgdmFsdWU9XCIke21pbkxpY2Vuc2VDb3VudH1cIlxuICAgICAgICAgICAgICAgICAgICAgIG9ua2V5ZG93bj1cInRoaXMuc3R5bGUud2lkdGggPSAoKHRoaXMudmFsdWUubGVuZ3RoKzEgKSAqIDkpICsgJ3B4JztcIiBvbmtleXVwPVwiaWYodGhpcy52YWx1ZTwwKSB2YWx1ZT0xO1wiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNhYXMtc2hvcC1jb3VudC1uYW1lXCI+0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GMPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2Fhcy1zaG9wLWZvcm0tcGx1c1wiPjwvZGl2PlxuICAgICAgICAgIDwvZGl2PmBcbiAgICAgIDogJydcblxuICAgIGNvbnN0IHRlbXBvcmFyeVdpZGdldCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJzYWFzLXNob3AtY29udGFpbmVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzYWFzLXNob3AtY29tbW9uLWZvcm1cIj5cbiAgICAgICAgICR7Y291bnRMaWNlbnNlc31cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJzYWFzLXNob3AtcGVyaW9kLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwic2Fhcy1zaG9wLXBlcmlvZC1pbnB1dFwiPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInNhYXMtc2hvcC1wZXJpb2QtbW9udGhcIj5cbiAgICAgICAgICAgICDQnNC10YHRj9GH0L3QsNGPXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzYWFzLXNob3AtcGVyaW9kLXllYXJcIj5cbiAgICAgICAgICAgICDQk9C+0LTQvtCy0LDRj1xuICAgICAgICAgICAgPC9idXR0b24+ICBcbiAgICAgICAgICAgICR7ZGlzY291bnQgPyBgPGRpdiBjbGFzcz1cInNhYXMtc2hvcC1wZXJpb2Qtc2FsZVwiID4gLSAke2Rpc2NvdW50fSUgPC9kaXY+YCA6ICcnfVxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwic2Fhcy1zaG9wLWNhcmQtY29udGFpbmVyXCI+IFxuICAgICAgICAgICR7b3V0cHV0Q2FyZExpc3QoKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5gXG5cbiAgICB3aWRnZXRCb3guaW5uZXJIVE1MICs9IHRlbXBvcmFyeVdpZGdldFxuXG4gICAgdGhpcy5jYXJkTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zYWFzLXNob3AtY2FyZCcpXG4gICAgdGhpcy5pbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zYWFzLXNob3AtZm9ybS1pbnB1dCcpXG4gICAgdGhpcy5wbHVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNhYXMtc2hvcC1mb3JtLXBsdXMnKVxuICAgIHRoaXMubWludXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2Fhcy1zaG9wLWZvcm0tbWludXMnKVxuICAgIHRoaXMucGVyaW9kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNhYXMtc2hvcC1wZXJpb2QtaW5wdXQnKVxuICAgIHRoaXMuY291bnROYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNhYXMtc2hvcC1jb3VudC1uYW1lJylcbiAgICB0aGlzLm1vbnRoUGVyaW9kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNhYXMtc2hvcC1wZXJpb2QtbW9udGgnKVxuICAgIHRoaXMueWVhclBlcmlvZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zYWFzLXNob3AtcGVyaW9kLXllYXInKVxuXG4gICAgdGhpcy5jaGVja1RhcmlmZih0YXJpZmZMaXN0KVxuXG4gICAgdGhpcy5pbnB1dD8uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgdGhpcy5jaGVja1RhcmlmZih0YXJpZmZMaXN0KVxuICAgIH0pXG4gICAgdGhpcy5wbHVzPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMuY2FsY1BsdXModGhpcy5wbHVzLCBtYXhpbXVtVXNlcnMpXG4gICAgICB0aGlzLmNoZWNrVGFyaWZmKHRhcmlmZkxpc3QpXG4gICAgfSlcbiAgICB0aGlzLm1pbnVzPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMuY2FsY01pbnVzKHRoaXMubWludXMsIG1pbkxpY2Vuc2VDb3VudClcbiAgICAgIHRoaXMuY2hlY2tUYXJpZmYodGFyaWZmTGlzdClcbiAgICB9KVxuXG4gICAgdGhpcy5tb250aFBlcmlvZD8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgIHRoaXMuc2V0UGVyaW9kKGV2ZW50LnRhcmdldCwgZmFsc2UpXG4gICAgfSlcblxuICAgIHRoaXMueWVhclBlcmlvZD8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgIHRoaXMuc2V0UGVyaW9kKGV2ZW50LnRhcmdldCwgdHJ1ZSlcbiAgICB9KVxuICAgIHRoaXMucGVyaW9kPy5wYXJlbnROb2RlIS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMuY2hlY2tUYXJpZmYodGFyaWZmTGlzdClcbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0xpY2Vuc2VzQ291bnQgPSAoZWw6IEhUTUxEaXZFbGVtZW50LCBpbnB1dFZhbHVlOiBudW1iZXIsIHRhcmlmZjogSVBsYW4pID0+IHtcbiAgICBjb25zdCBidG4gPSBlbC5xdWVyeVNlbGVjdG9yKCcuc2Fhcy1zaG9wLWNhcmQtYnV0dG9uLWNvbnRhaW5lcicpXG4gICAgaWYgKGlucHV0VmFsdWUgPiB0YXJpZmYubWF4TGljZW5zZUNvdW50ICYmIHRhcmlmZi5taW5MaWNlbnNlQ291bnQgIT09IHRhcmlmZi5tYXhMaWNlbnNlQ291bnQpIHtcbiAgICAgIGJ0bi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgIHJldHVybiBg0JTQviAke3RhcmlmZi5tYXhMaWNlbnNlQ291bnR9ICR7dGhpcy5jb25kaXRpb25Vc2VyVGV4dCh0YXJpZmYubWF4TGljZW5zZUNvdW50KX1gXG4gICAgfSBlbHNlIGlmIChpbnB1dFZhbHVlIDwgdGFyaWZmLm1pbkxpY2Vuc2VDb3VudCAmJiB0YXJpZmYubWF4TGljZW5zZUNvdW50ICE9PSB0YXJpZmYubWluTGljZW5zZUNvdW50KSB7XG4gICAgICBidG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICByZXR1cm4gYNCe0YIgJHt0YXJpZmYubWluTGljZW5zZUNvdW50fSAke3RoaXMuY29uZGl0aW9uVXNlclRleHQodGFyaWZmLm1pbkxpY2Vuc2VDb3VudCl9YFxuICAgIH0gZWxzZSB7XG4gICAgICBidG4ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRCdXR0b24gPSAoZWw6IEhUTUxEaXZFbGVtZW50LCB0YXJpZmY6IElQbGFuLCByZWFzb24/OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBidXR0b24gPSBlbC5xdWVyeVNlbGVjdG9yKCcuc2Fhcy1zaG9wLWNhcmQtYnV0dG9uLWNvbnRhaW5lcicpXG4gICAgbGV0IHByaWNlVGV4dCA9ICcnXG5cbiAgICBjb25zdCBub3RDdXJyZW50VGFyaWZmID0gdGhpcy5jb25maWc/LnN1YnNjcmlwdGlvbklkICE9PSB0YXJpZmYuaWRcbiAgICBjb25zdCBub3RQYWNrYWdlVGFyaWZmID0gdGFyaWZmLm1heExpY2Vuc2VDb3VudCAhPT0gdGFyaWZmLm1pbkxpY2Vuc2VDb3VudFxuICAgIGNvbnN0IHByaWNlV2l0aERpc2NvdW50ID0gdGFyaWZmLmRpc2NvdW50XG4gICAgICA/IHRhcmlmZj8ucHJpY2UgKiBOdW1iZXIodGhpcy5pbnB1dD8udmFsdWUpICogMTIgKiAoKDEwMCAtIHRhcmlmZi5kaXNjb3VudCkgLyAxMDApXG4gICAgICA6IHRhcmlmZj8ucHJpY2UgKiBOdW1iZXIodGhpcy5pbnB1dD8udmFsdWUpICogMTJcblxuICAgIGNvbnN0IHByaWNlID0gKHRoaXMucGVyaW9kLmNoZWNrZWQgPyBwcmljZVdpdGhEaXNjb3VudCA6IHRhcmlmZj8ucHJpY2UgKiBOdW1iZXIodGhpcy5pbnB1dD8udmFsdWUpKS50b0xvY2FsZVN0cmluZygpXG5cbiAgICBpZiAodGFyaWZmPy5wcmljZSAmJiBub3RDdXJyZW50VGFyaWZmICYmICFyZWFzb24gJiYgdGhpcy5pbnB1dCAmJiBub3RQYWNrYWdlVGFyaWZmKSB7XG4gICAgICBwcmljZVRleHQgPSBg0JrRg9C/0LjRgtGMINC30LAgJHtwcmljZX0g4oK9YFxuICAgIH0gZWxzZSBpZiAoIW5vdFBhY2thZ2VUYXJpZmYgJiYgbm90Q3VycmVudFRhcmlmZikge1xuICAgICAgcHJpY2VUZXh0ID0gYNCS0YvQsdGA0LDRgtGMICR7dGFyaWZmLm5hbWV9YFxuICAgIH0gZWxzZSBpZiAocmVhc29uKSB7XG4gICAgICBwcmljZVRleHQgPSByZWFzb25cbiAgICB9IGVsc2Uge1xuICAgICAgcHJpY2VUZXh0ID0gJ9Ci0LXQutGD0YnQuNC5INGC0LDRgNC40YQnXG4gICAgfVxuXG4gICAgY29uc3QgaHJlZiA9IHRoaXMuY3JlYXRlSHJlZih0YXJpZmYpXG5cbiAgICBpZiAoIW5vdEN1cnJlbnRUYXJpZmYpIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcblxuICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBgXG4gICAgICA8cCBjbGFzcz1cInNhYXMtc2hvcC1jYXJkLWJ1dHRvbi1ocmVmXCI+XG4gICAgICAgICAgJHtwcmljZVRleHR9XG4gICAgICA8L3A+XG4gICAgICBgXG5cbiAgICAvL0B0cy1pZ25vcmVcbiAgICBidXR0b24ub25jbGljayA9ICgpID0+IHtcbiAgICAgIHdpbmRvdy5vcGVuKGhyZWYsICdfYmxhbmsnKVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tUYXJpZmYgPSAodGFyaWZmTGlzdDogSVBsYW5bXSkgPT4ge1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIHRoaXMuaW5wdXQ/LnZhbHVlID0gTnVtYmVyKHRoaXMuaW5wdXQhLnZhbHVlKSA+IDk5OTk5ID8gOTk5OTkgOiBOdW1iZXIodGhpcy5pbnB1dD8udmFsdWUpXG4gICAgaWYgKHRoaXMuaW5wdXQpIHRoaXMuaW5wdXQuc3R5bGUud2lkdGggPSB0aGlzLmlucHV0LnZhbHVlLmxlbmd0aCAqIDkgKyAncHgnXG4gICAgaWYgKHRoaXMuY291bnROYW1lKSB0aGlzLmNvdW50TmFtZS50ZXh0Q29udGVudCA9IHRoaXMudXNlclRleHQoTnVtYmVyKHRoaXMuaW5wdXQ/LnZhbHVlKSlcblxuICAgIGZvciAoY29uc3QgZWwgb2YgdGhpcy5jYXJkTGlzdCkge1xuICAgICAgY29uc3QgdGFyaWZmID0gdGFyaWZmTGlzdC5maW5kKChpdGVtKSA9PiBpdGVtLmlkLnRvU3RyaW5nKCkgPT09IGVsLmRhdGFzZXQudGFyaWZmaWQpXG4gICAgICBjb25zdCByZWFzb24gPSB0aGlzLmNoZWNrTGljZW5zZXNDb3VudChlbCwgTnVtYmVyKHRoaXMuaW5wdXQ/LnZhbHVlKSwgdGFyaWZmKVxuXG4gICAgICB0aGlzLnNldEJ1dHRvbihlbCwgdGFyaWZmLCByZWFzb24pXG5cbiAgICAgIGNvbnN0IHByaWNlVGV4dCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5zYWFzLXNob3AtcHJpY2UtdGV4dCcpXG4gICAgICBjb25zdCBwcmljZSA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5zYWFzLXNob3AtcHJpY2UtdmFsdWUnKVxuICAgICAgY29uc3QgdmFyaWFibGVPZlBlcmlvZCA9IHRoaXMucGVyaW9kLmNoZWNrZWQgPyAn0LfQsCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0LIg0LPQvtC0JyA6ICfQt9CwINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQsiDQvNC10YHRj9GGJ1xuICAgICAgY29uc3QgeWVhclByaWNlV2l0aERpc2NvdW50ID1cbiAgICAgICAgdGhpcy5wZXJpb2QuY2hlY2tlZCAmJiB0YXJpZmYuZGlzY291bnRcbiAgICAgICAgICA/ICh0YXJpZmYucHJpY2UgKiAxMiAqICgoMTAwIC0gdGFyaWZmLmRpc2NvdW50KSAvIDEwMCkpLnRvTG9jYWxlU3RyaW5nKClcbiAgICAgICAgICA6ICh0YXJpZmYucHJpY2UgKiAxMikudG9Mb2NhbGVTdHJpbmcoKVxuXG4gICAgICBwcmljZVRleHQudGV4dENvbnRlbnQgPVxuICAgICAgICB0YXJpZmYubWF4TGljZW5zZUNvdW50ID09PSB0YXJpZmYubWluTGljZW5zZUNvdW50XG4gICAgICAgICAgPyBg0LTQviAke3RhcmlmZi5tYXhMaWNlbnNlQ291bnR9INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC5YFxuICAgICAgICAgIDogdmFyaWFibGVPZlBlcmlvZFxuICAgICAgcHJpY2UudGV4dENvbnRlbnQgPSB0aGlzLnBlcmlvZC5jaGVja2VkID8gYCR7eWVhclByaWNlV2l0aERpc2NvdW50fSDigr1gIDogYCR7dGFyaWZmLnByaWNlLnRvTG9jYWxlU3RyaW5nKCl9IOKCvWBcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUhyZWYgPSAodGFyaWZmOiBJUGxhbikgPT4ge1xuICAgIGNvbnN0IGFubnVhbGx5ID0gdGhpcy5wZXJpb2QuY2hlY2tlZCA/ICcmYW5udWFsbHk9dHJ1ZScgOiAnJ1xuICAgIGNvbnN0IGxpY2Vuc2VzQ291bnQgPVxuICAgICAgdGhpcy5pbnB1dD8udmFsdWUgJiYgdGFyaWZmLm1heExpY2Vuc2VDb3VudCAhPT0gdGFyaWZmLm1pbkxpY2Vuc2VDb3VudFxuICAgICAgICA/IHRoaXMuaW5wdXQ/LnZhbHVlXG4gICAgICAgIDogdGFyaWZmLm1heExpY2Vuc2VDb3VudFxuXG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMucmVkaXJlY3RVcmwgK1xuICAgICAgYC9jaGVja291dD9wcm9kdWN0SWQ9JHt0aGlzLnByb2R1Y3RJZH0mdGFyaWZmSWQ9JHt0YXJpZmYuaWR9JHthbm51YWxseX0mbGljZW5zZXNDb3VudD0ke2xpY2Vuc2VzQ291bnR9YFxuICAgIClcbiAgfVxuXG4gIHByaXZhdGUgY2FsY1BsdXMgPSAoZWw6IEhUTUxEaXZFbGVtZW50LCBtYXg6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IGlucHV0OiBIVE1MSW5wdXRFbGVtZW50ID0gZWw/LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLnNhYXMtc2hvcC1mb3JtLWlucHV0JylcbiAgICBjb25zdCBjb3VudCA9IHBhcnNlSW50KGlucHV0LnZhbHVlKSArIDFcblxuICAgIGlmIChtYXggPj0gY291bnQpIHtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgaW5wdXQudmFsdWUgPSBjb3VudFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2FsY01pbnVzID0gKGVsOiBIVE1MRGl2RWxlbWVudCwgbWluOiBudW1iZXIpID0+IHtcbiAgICBsZXQgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgPSBlbD8ucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuc2Fhcy1zaG9wLWZvcm0taW5wdXQnKVxuICAgIGxldCBjb3VudCA9IHBhcnNlSW50KGlucHV0LnZhbHVlKSAtIDFcblxuICAgIGlmIChjb3VudCA+PSBtaW4pIHtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgaW5wdXQudmFsdWUgPSBjb3VudFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0UGVyaW9kID0gKGVsOiBhbnksIHY6IGJvb2xlYW4pID0+IHtcbiAgICBjb25zdCBpbnB1dDogSFRNTElucHV0RWxlbWVudCA9IGVsPy5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5zYWFzLXNob3AtcGVyaW9kLWlucHV0JylcbiAgICBpbnB1dC5jaGVja2VkID0gdlxuICB9XG5cbiAgcHJpdmF0ZSB1c2VyVGV4dCA9IChjb3VudDogbnVtYmVyKSA9PiB7XG4gICAgY29uc3QgbGFzdE51bWJlciA9ICtjb3VudC50b1N0cmluZygpLnNsaWNlKC0xKVxuICAgIGNvbnN0IHByZUxhc3ROdW1iZXIgPSArY291bnQudG9TdHJpbmcoKS5zbGljZSgtMiwgLTEpXG4gICAgaWYgKGxhc3ROdW1iZXIgPT09IDEgJiYgcHJlTGFzdE51bWJlciAhPT0gMSkge1xuICAgICAgcmV0dXJuICfQv9C+0LvRjNC30L7QstCw0YLQtdC70YwnXG4gICAgfSBlbHNlIGlmIChsYXN0TnVtYmVyID4gMSAmJiBsYXN0TnVtYmVyIDwgNSAmJiBwcmVMYXN0TnVtYmVyICE9PSAxKSB7XG4gICAgICByZXR1cm4gJ9C/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjydcbiAgICB9IGVsc2UgcmV0dXJuICfQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuSdcbiAgfVxuXG4gIHByaXZhdGUgY29uZGl0aW9uVXNlclRleHQgPSAoY291bnQ6IG51bWJlcikgPT4ge1xuICAgIHJldHVybiBjb3VudC50b1N0cmluZygpLnNsaWNlKC0xKSA9PT0gJzEnID8gJ9C/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjycgOiAn0L/QvtC70YzQt9C+0LLQsNGC0LXQu9C10LknXG4gIH1cbn1cbiIsImltcG9ydCB7IFdpZGdldFNhYXNTaG9wUHJlc2VudGVyIH0gZnJvbSAnLi9wcmVzZW50ZXIvV2lkZ2V0U2Fhc1Nob3BQcmVzZW50ZXInXG5pbXBvcnQgJy4vc3R5bGUuY3NzJ1xuXG5jb25zdCBwcm9kdWN0SWQgPSAnMGViODQwMTQtZjM3MC00NDkwLTgwYWUtNzg5NDczNDYwY2VlJ1xuY29uc3QgYXBpID0gJ2h0dHBzOi8vbGsubXJzYXBwLnJ1L2FwaSdcbmNvbnN0IHJlZGlyZWN0VXJsID0gJ2h0dHBzOi8vbGsubXJzYXBwLnJ1J1xuY29uc3QgaWRDb250YWluZXIgPSAnLnNhYXNfc2hvcF90YXJpZmZzJ1xuXG4vLyB3aW5kb3cuV2lkZ2V0Q29uZmlnID0ge1xuLy8gICBwcm9kdWN0SWQ6ICdhZDViNzRiYy1iOWFmLTRhNGEtODFhOS0yMWU3MTNjZGMyMDYnLFxuLy8gfVxuXG5jb25zdCBjdXJyZW50UHJvZHVjdElkID0gd2luZG93LldpZGdldENvbmZpZz8ucHJvZHVjdElkID8gd2luZG93LldpZGdldENvbmZpZy5wcm9kdWN0SWQgOiBwcm9kdWN0SWRcblxudmFyIE5ld1dpZGdldCA9IG5ldyBXaWRnZXRTYWFzU2hvcFByZXNlbnRlcih7XG4gIGlkQ29udGFpbmVyLFxuICBhcGksXG4gIHJlZGlyZWN0VXJsLFxuICBwcm9kdWN0SWQ6IGN1cnJlbnRQcm9kdWN0SWQsXG59KVxuXG5pZiAod2luZG93LldpZGdldENvbmZpZykge1xuICBOZXdXaWRnZXQuaW5pdCh3aW5kb3cuV2lkZ2V0Q29uZmlnKVxufSBlbHNlIE5ld1dpZGdldC5pbml0KClcbiIsImltcG9ydCB7IElDb25maWcsIElXaWRnZXRTYWFzU2hvUHJlc2VudGVyLCBJV2lkZ2V0U2Fhc1Nob3BQYXJhbXMgfSBmcm9tICcuL0lXaWRnZXRTYWFzU2hvcCdcbmltcG9ydCB7IFdpZGdldEJveCB9IGZyb20gJy4vd2lkZ2V0Qm94L1dpZGdldEJveCdcbmltcG9ydCB7IElQbGFuIH0gZnJvbSAnLi93aWRnZXRCb3gvSVdpZGdldEJveCc7XG5cbmV4cG9ydCBjbGFzcyBXaWRnZXRTYWFzU2hvcFByZXNlbnRlciBpbXBsZW1lbnRzIElXaWRnZXRTYWFzU2hvUHJlc2VudGVyIHtcbiAgaWRDb250YWluZXI6IHN0cmluZyA9ICcnXG4gIGFwaTogc3RyaW5nID0gJydcbiAgcmVkaXJlY3RVcmw6IHN0cmluZyA9ICcnXG4gIHByb2R1Y3RJZDogc3RyaW5nIHwgbnVsbCA9IG51bGxcblxuICBjb25zdHJ1Y3RvcihwYXJhbXM6IElXaWRnZXRTYWFzU2hvcFBhcmFtcykge1xuICAgIHRoaXMuaWRDb250YWluZXIgPSBwYXJhbXMuaWRDb250YWluZXJcbiAgICB0aGlzLmFwaSA9IHBhcmFtcy5hcGlcbiAgICB0aGlzLnJlZGlyZWN0VXJsID0gcGFyYW1zLnJlZGlyZWN0VXJsXG4gICAgdGhpcy5wcm9kdWN0SWQgPSBwYXJhbXMucHJvZHVjdElkXG4gIH1cblxuICBpbml0KGNvbmZpZz86IElDb25maWcpOiB2b2lkIHtcbiAgICBmZXRjaCh0aGlzLmFwaSArICcvcHJvZHVjdHMvJyArIHRoaXMucHJvZHVjdElkICsgJy9wbGFucycpXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKVxuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXG4gICAgICB9KVxuICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5pZENvbnRhaW5lcikpIHtcbiAgICAgICAgICBjb25zdCB3aWRnZXRCb3ggPSBuZXcgV2lkZ2V0Qm94KHtcbiAgICAgICAgICAgIHdpZGdldEJveDogZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLmlkQ29udGFpbmVyKSxcbiAgICAgICAgICAgIHJlZGlyZWN0VXJsOiB0aGlzLnJlZGlyZWN0VXJsLFxuICAgICAgICAgICAgcHJvZHVjdElkOiB0aGlzLnByb2R1Y3RJZCxcbiAgICAgICAgICAgIHBsYW5zOiBkYXRhLFxuICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgd2lkZ2V0Qm94LndpZGdldENyZWF0ZSgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWxlcnQoJ0NvbnRhaW5lciB3aXRoIGlkICcgKyB0aGlzLmlkQ29udGFpbmVyICsgJyBub3QgZm91bmQhJylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgICB9KVxuICB9XG59XG4iXSwibmFtZXMiOlsiV2lkZ2V0Qm94IiwiY29uc3RydWN0b3IiLCJwYXJhbXMiLCJ3aWRnZXRCb3giLCJ1bmRlZmluZWQiLCJyZWRpcmVjdFVybCIsInByb2R1Y3RJZCIsImNhcmRMaXN0IiwiaW5wdXQiLCJwbHVzIiwibWludXMiLCJwZXJpb2QiLCJjb3VudE5hbWUiLCJtb250aFBlcmlvZCIsInllYXJQZXJpb2QiLCJ3aWRnZXRDcmVhdGUiLCJ0aGlzIiwidGFyaWZmTGlzdCIsInBsYW5zIiwiZGlzY291bnQiLCJtYXhpbXVtVXNlcnMiLCJtaW5MaWNlbnNlQ291bnQiLCJpc0NvdW50Q29udGFpbmVyIiwiZm9yRWFjaCIsImVsIiwibWF4TGljZW5zZUNvdW50IiwidGVtcG9yYXJ5V2lkZ2V0IiwidGVtcG9yYXJ5Q2FyZCIsInN0eWxlRm9yQnRuIiwiaWQiLCJjb25maWciLCJoaWdodGxpZ2h0IiwiaXNEaXNhYmxlZCIsInN1YnNjcmlwdGlvbklkIiwibmFtZSIsInByaWNlIiwidG9Mb2NhbGVTdHJpbmciLCJkZXNjcmlwdGlvbiIsIm91dHB1dENhcmRMaXN0IiwiaW5uZXJIVE1MIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicXVlcnlTZWxlY3RvciIsImNoZWNrVGFyaWZmIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNhbGNQbHVzIiwiY2FsY01pbnVzIiwiZXZlbnQiLCJzZXRQZXJpb2QiLCJ0YXJnZXQiLCJwYXJlbnROb2RlIiwiY2hlY2tMaWNlbnNlc0NvdW50IiwiaW5wdXRWYWx1ZSIsInRhcmlmZiIsImJ0biIsInNldEF0dHJpYnV0ZSIsImNvbmRpdGlvblVzZXJUZXh0IiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QnV0dG9uIiwicmVhc29uIiwiYnV0dG9uIiwicHJpY2VUZXh0Iiwibm90Q3VycmVudFRhcmlmZiIsIm5vdFBhY2thZ2VUYXJpZmYiLCJwcmljZVdpdGhEaXNjb3VudCIsIk51bWJlciIsInZhbHVlIiwiY2hlY2tlZCIsImhyZWYiLCJjcmVhdGVIcmVmIiwib25jbGljayIsIndpbmRvdyIsIm9wZW4iLCJzdHlsZSIsIndpZHRoIiwibGVuZ3RoIiwidGV4dENvbnRlbnQiLCJ1c2VyVGV4dCIsImZpbmQiLCJpdGVtIiwidG9TdHJpbmciLCJkYXRhc2V0IiwidGFyaWZmaWQiLCJ2YXJpYWJsZU9mUGVyaW9kIiwieWVhclByaWNlV2l0aERpc2NvdW50IiwiYW5udWFsbHkiLCJsaWNlbnNlc0NvdW50IiwibWF4IiwiY291bnQiLCJwYXJzZUludCIsIm1pbiIsInYiLCJsYXN0TnVtYmVyIiwic2xpY2UiLCJwcmVMYXN0TnVtYmVyIiwiY3VycmVudFByb2R1Y3RJZCIsIldpZGdldENvbmZpZyIsIk5ld1dpZGdldCIsImlkQ29udGFpbmVyIiwiYXBpIiwiaW5pdCIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwic3RhdHVzIiwiUHJvbWlzZSIsInJlamVjdCIsIkVycm9yIiwic3RhdHVzVGV4dCIsInJlc29sdmUiLCJqc29uIiwiZGF0YSIsImFsZXJ0IiwiY2F0Y2giLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9